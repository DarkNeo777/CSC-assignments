# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ecn1f9XwJe5d6oVdm6yIONLl8bCNE7-1
"""

import numpy as np
import tensorflow as tf
from matplotlib import pyplot

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255) 
training_set = train_datagen.flow_from_directory("/content/drive/MyDrive/Colab Notebooks/images", target_size=(1024,1024), 
batch_size=1, class_mode="binary") 
 
model = tf.keras.Sequential() 
model.add(tf.keras.layers.Conv2D(1,(3,3),input_shape=(1024,1024,3),activation="relu")) 
#adding another layers of convolution with a strid of (2,2)
model.add(tf.keras.layers.Conv2D(1,(2,2),input_shape=(1024,1024,3),activation="relu")) 

model.add(tf.keras.layers.MaxPool2D(pool_size=(3,3) ) ) 
#add an addition of pooling with parameters the same
model.add(tf.keras.layers.MaxPool2D(pool_size=(3,3) ) ) 
model.add(tf.keras.layers.Flatten()) 
 
model.add(tf.keras.layers.Dense(units=128,activation="relu" ) ) 
model.add(tf.keras.layers.Dense(units=1,activation="sigmoid")) 
 
model.summary() 
model.compile(optimizer="adam",loss="binary_crossentropy",metrics=['accuracy']) 
 
model.fit_generator(training_set,epochs=2) 
test_loss, test_acc  = model.evaluate_generator(training_set) 
print(test_acc) 

# check for convolutional layer, by finding the when conv is used
for layer in model.layers:
	if 'conv' not in layer.name:
		#skips the layer if conv not included
		continue
	# get filter weights from the layers of the convolution
	filters, biases = layer.get_weights()
 
	print(layer.name, filters.shape)

# plot first few filters only one filter available
n_filters, ix = 1, 1
for i in range(n_filters):
	# get the filter
	f = filters[:, :, :, i]
	# plot each channel separately
	for j in range(1):
		# specify subplot and turn of axis
		ax = pyplot.subplot(n_filters, 1, ix)
		ax.set_xticks([])
		ax.set_yticks([])
		# plot filter channel in grayscale
		pyplot.imshow(f[:, :, j], cmap='gray')
		ix += 1
# show the figure
pyplot.show()